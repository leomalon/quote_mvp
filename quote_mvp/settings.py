"""
Django settings for quote_mvp project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'fallback-secret-for-local')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

APP_NAME = 'CotiLink'
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin', #admin site
    'django.contrib.auth', #auth framework
    'django.contrib.contenttypes', #tracks your models 
    'django.contrib.sessions', #enables sessions supports
    'django.contrib.messages', #framework for flash messages
    'django.contrib.staticfiles', #manages and serves static files
    'home.apps.HomeConfig', #App I have created
    'quotes.apps.QuotesConfig', #App I have created
    'users.apps.UsersConfig'
]

INSTALLED_APPS += [
    'django.contrib.sites', #tells allauth what the current domain is
    'allauth', #core package, wires local account management and social account workflows
    'allauth.account', #manages local accounts
    'allauth.socialaccount', #is the social auth engine
    'allauth.socialaccount.providers.google', #Google specific provider pluging
]


AUTHENTICATION_BACKENDS = [
    'users.backends.EmailBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 0  # Required by allauth. This is the row number in the "Sites" of Admin Site

# Optional but recommended:
ACCOUNT_LOGIN_METHODS = {'email'}  #This determines what field users log in with.
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

from django.urls import reverse_lazy

LOGIN_URL = reverse_lazy('login') #This is the path that will send users no authorized.
LOGIN_REDIRECT_URL = reverse_lazy('users:register')
LOGOUT_REDIRECT_URL = reverse_lazy('login')

SOCIALACCOUNT_LOGIN_ON_GET = True #This avoids using the intermidiate page from allauth when clicking "Login with Google"
ACCOUNT_UNIQUE_EMAIL = True

#Additional settings for Allauth
ACCOUNT_USER_MODEL_USERNAME_FIELD = 'email' #Tells django-allauth what field represents the "username" in your custom model. Makes the "email" the primary login field
#ACCOUNT_USER_MODEL_USERNAME_FIELD=None
# ACCOUNT_EMAIL_REQUIRED = True #Makes the email field required during signup
#ACCOUNT_USERNAME_REQUIRED = False #If False we eliminate usernames entirely and rely only on emails
# ACCOUNT_AUTHENTICATION_METHOD = 'email' #This determines what field users log in with.

AUTH_USER_MODEL = 'users.CustomUser'

#Settings for the pdf field in the model of the app "quotes"
MEDIA_URL = '/media/' #Public URL prefix Django uses to expose media files
MEDIA_ROOT = BASE_DIR / 'media' #Actual storage location on disk

#Settings for the email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware'
]

#This is for whitenoise to serve static files
MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

ROOT_URLCONF = 'quote_mvp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [], #This tells Django to not look inside global folders
        'APP_DIRS': True, #This tells Django to look inside app's folders
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'home.context_processors.settings'  #Here first we create the file "context_processors" directly in the home folder
            ], 
        },
    },
]

WSGI_APPLICATION = 'quote_mvp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

#This is for using Postgres in Railway

DATABASES = {
    'default': dj_database_url.config(
        default=os.getenv('DATABASE_URL')
    )
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Lima' #I set this for the fecha_creacion field in the models.py of Quotes

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles" #For production

#This is for whitenoise
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
